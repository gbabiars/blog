<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Greg Babiars' Blog]]></title>
  <link href="http://gbabiars.github.io/atom.xml" rel="self"/>
  <link href="http://gbabiars.github.io/"/>
  <updated>2013-08-01T20:01:09-05:00</updated>
  <id>http://gbabiars.github.io/</id>
  <author>
    <name><![CDATA[Greg Babiars]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Myths of Backbone.js]]></title>
    <link href="http://gbabiars.github.io/blog/2013/08/01/the-myths-of-backbone-dot-js/"/>
    <updated>2013-08-01T20:00:00-05:00</updated>
    <id>http://gbabiars.github.io/blog/2013/08/01/the-myths-of-backbone-dot-js</id>
    <content type="html"><![CDATA[<p>When it comes to building javascript centric web apps, it&rsquo;s hard to argue with the popularity of Backbone.  It has played a big part in shifting client side javascript apps from being jQuery spaghetti to well structured, more maintainable pieces of software.  It has helped move developers away from &ldquo;truth in DOM&rdquo; and towards keeping record stores in the javascript application itself.  While it has done so much, an amazing achievement for such a relatively small library, there is a lot of misinformation about Backbone that exists in the web community.</p>

<p>As a preface, I do use Backbone on a daily basis and both appreciate it for the simplicity and functionality it provides, while also wishing for more at times.  Developers who have used Backbone on a regular basis and have built non-trivial applications have also felt this pain.  These are simply some of the myths I feel exist about Backbone.</p>

<h2>It is a framework</h2>

<p>If you read any blog posts or see any getting started guides, you&rsquo;ll more than likely hear Backbone referred to as a &ldquo;framework&rdquo;.  This is something I disagree with strongly, as Backbone is much more of a library than a framework.  This is not a knock on Backbone, in fact Backbone is a library that gives you the pieces to create your own framework.  It has many of the same components you&rsquo;d expect to see in a framework (models, views, router), but if you take away the router, you&rsquo;ll see what you are given are building blocks.  Frameworks will wire things up for you, whether through configuration or convention, but Backbone leaves it up to you to figure out how to wire up your application.  This allows it to be very flexible, but also places great responsibilities on the developers using it.</p>

<h2>It is easy to learn</h2>

<p>This is one of the most common claims when people evaluate Backbone.  There is no question that the core of Backbone, particularly the models, collections and views, is easy to learn.  The difficulty instead lies in figuring out how to get all the pieces to work together.  Backbone&rsquo;s difficulty ramps up as your application get&rsquo;s more complex.  How do you manage child views?  What about aggregates that depend on multiple collections?  What about cleaning up your views to prevent zombie events?  Backbone&rsquo;s unopinionated approach gives you very little guidance on how to solve these situations, therefore it is up to the developer to learn patterns used in the Backbone community or try to figure it out themselves.  One great thing about Backbone&rsquo;s popularity is that most of these problems are solved and many libraries exist that do the work for you (i.e. <a href="http://marionettejs.com/">Marrionette.js</a>).</p>

<h2>It is lightweight</h2>

<p>The library itself is only 6.3k, but it lacks any boilerplate code.  This means you will either be writing this yourself or using 3rd party libraries.  Much of this depends on the use case, but you can often end up with the same total size application with Backbone as you would had you used one of the larger frameworks.</p>

<h2>It is better/worse than…</h2>

<p>Insert a framework or library here.  Backbone vs. Angular? or vs. Ember?  What about compared to Knockout?  It has become very common to see comparisons between the different libraries and frameworks looking for a winner.  Unfortunately most of these comparisons are apples and oranges.  Besides that, there is plenty of room for many solutions to the wide range application needs that exist.  It is important to understand the different features and pitfalls of using each solution so that you or your team can make the best choice for your projects.</p>

<h2>…but in the end…</h2>

<p>Backbone is still a good choice when building client side javascript applications, but you should understand what it gives you and what you have to do yourself.  Luckily Backbone&rsquo;s popularity has led to a large plugin ecosystem that solve most of the common problems.  In the end, if you are going to use Backbone, expect to have to make some serious architectural decisions and write boilerplate code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Write Prefix-free CSS using Grunt]]></title>
    <link href="http://gbabiars.github.io/blog/2013/07/21/write-prefix-free-css-using-grunt/"/>
    <updated>2013-07-21T14:30:00-05:00</updated>
    <id>http://gbabiars.github.io/blog/2013/07/21/write-prefix-free-css-using-grunt</id>
    <content type="html"><![CDATA[<p>One of the most painful parts about using newer CSS3 features is the amount of prefixed styles that must be written in order to support the wide range of browsers out there.  There are many ways to alleviate this pain, including preprocessor mixins.  One of the best ways I&rsquo;ve found to eliminate this altogether is to have the prefix generation automated into your build process.  By moving prefixing to this automation step, we can write more maintainable css that will also be easier to update with future browser changes.</p>

<h2>Automating using Grunt</h2>

<p>My build tool of choice is Grunt, particularly because of the large number of task plugins available.  One such plugin is available for automating prefix generation of css, called <a href="https://github.com/nDmitry/grunt-autoprefixer">grunt-autoprefixer</a>.  To make use of it, we simply need to point to the files we want to generate and the prefixed css will be generated.</p>

<p>Our Grunt snippet:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">autoprefixer</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">browsers</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;last 2 versions&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">dist</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">files</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;css/dist/styles.css&#39;</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;css/src/styles.css&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example of css with flexbox:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.column</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting css generated by autoprefixer:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.column</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">flexbox</span><span class="p">;</span>
</span><span class='line'>  <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the css we write is much simpler than the generated css and we no longer have to worry ourselves with maintaining prefixes as browser support changes.  Updating our css is as simple as rerunning our Grunt task.</p>

<p>You can modify which browsers are supported by changing the browser array in the grunt-autoprefixer options.  For more documentation, check out the <a href="https://github.com/nDmitry/grunt-autoprefixer">github repo</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reusable Formatting Using Ember Handlebars Helpers]]></title>
    <link href="http://gbabiars.github.io/blog/2013/06/16/reusable-formatting-using-ember-handlebars-helpers/"/>
    <updated>2013-06-16T20:00:00-05:00</updated>
    <id>http://gbabiars.github.io/blog/2013/06/16/reusable-formatting-using-ember-handlebars-helpers</id>
    <content type="html"><![CDATA[<p>One of the great things about Ember is that it uses Handlebars as its default template engine.  Handlebars allows you to create a very declarative yet powerful UI through it&rsquo;s built in helpers like <code>{{each}}</code> and <code>{{if}}</code>.  Ember has also extended Handlebars with helpers like <code>{{view}}</code> and <code>{{render}}</code> as well.  While these helpers go a long way, Ember allows us to easily create our own custom helpers.  This allows us to build a UI that is very expressive while also DRYing up our application.  A great way to utilize this feature is by moving common formatting of values and types into helpers.</p>

<h3>Date Formatting</h3>

<p>To demonstrate how this can be beneficial, let&rsquo;s take a look at a pretty common task in applications: formatting dates.  The formatting logic can often be spread throughout the application without consistency.  We can clean this up by moving the formatting out of the models, controllers and views and into our custom helpers which we can reuse in different contexts.</p>

<p>For this example, we&rsquo;ll take the idea of a simple bulletin board system with Posts and Users.  The application will have three views: list of Posts, Post details and User details.  Our models will look like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">createdAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lastOnlineAt</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">body</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">createdAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lastUpdatedAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lastReadAt</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">authorName</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">authorId</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each post and user we have two dates.  We want to render these dates in our templates.</p>

<h3>Let&rsquo;s Update our Models</h3>

<p>Before we jump into helpers, let&rsquo;s handle the formatting within our models.  We can create computed properties on the model, such as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="nx">createdAtPrettyFormat</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;createdAt&#39;</span><span class="p">)).</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;MMM Do YYYY h:mm A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;createdAt&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>but we&rsquo;d quickly be duplicating our code.  First, if we decide we want to have the same date formatted differently in different views (i.e. having it without the time on the posts list, but with on the post details) we would have to create a different computed property for each format.  Secondly, we may have the same format for multiple dates and we would have to create different computed properties for each.</p>

<h3>Helpers to the Rescue</h3>

<p>A better solution is to move the formatting to a Handlebars helper.  For this example we are going to create two different helpers, one for relative dates and one for the full formatted date.  First we need to register our helpers:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;relativeDate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;prettyDate&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;MMM Do, YYYY h:mm A&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The helper method takes in two parameters: the name of the helper and and the value that we want to format.  Typically the logic here should be very simple, in this case we are just returning the date value as a formatted string.</p>

<p>Next, we can use utilize these helpers within our templates.</p>

<p>Posts List:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  {{#each model}}
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>{{#linkTo post this}}{{title}}{{/linkTo}} - {{relativeDate createdAt}}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Post Details:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;h3&gt;</span>{{title}}<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Posted by: {{#linkTo user authorId}}{{authorName}}{{/linkTo}} at {{prettyDate createdAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>{{body}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Last Updated {{relativeDate lastUpdatedAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>User Details:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;h3&gt;</span>{{name}}<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>User since {{prettyDate createdAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>Last online {{relativeDate lastOnlineAt}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Even though these are very simple views, we have gained a lot of reuse and provided consistency to the formats.  An added benefit is that the markup is very readable and obvious what format each date will be rendered as.  And the best part is that the values are bound, so when a date is updated in our model the formatted date is updated too.</p>

<h3>Number Formatting</h3>

<p>Formatting of numerical values is another place where helpers make sense, whether it is currency, percentages or placing commas. Here an example of a helper that displays as percent:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;percent&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39; %&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Default Values</h3>

<p>Another scenario is when we want to display a default message or value in place of a null or empty value.  This is easily done using a helper like the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">Em</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;There is no value to display.&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>And More&hellip;</h3>

<p>There may be many more domain specific use cases in your applications as well.  The best part is that they are usually trivial to implement.</p>

<p>The repo for the date examples can be seen <a href="https://github.com/gbabiars/bulletin-board-ember-helpers">here</a>.</p>

<p>For more information on Handlebars helpers, check out the <a href="http://emberjs.com/guides/templates/writing-helpers/">documentation</a>.</p>
]]></content>
  </entry>
  
</feed>
